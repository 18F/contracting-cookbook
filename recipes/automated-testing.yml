title: "Automated Testing"
description: |
  "The [US Digital Services playbook](https://playbook.cio.gov) recommends having automated tests for your code base. While manual testing of code can be a good process, automated tests ensure greater code stability.
  Acceptance test are a type of automated test that encapsulate a feature from the end-user's point of view. For example, a web application will have automated acceptance tests for user login. Acceptance tests are executed in a real browser that is coded to execute user input. On the other end of the scale are unit tests which test detailed input, output and side-effects for smallest, most isolated modules of code. In between these extremes are functional or integration tests which test the interactions between more than one unit of code. Naming of test types is inconsistent across the industry, and sometimes you will hear 'acceptance' and 'integration' tests used interchangeably.
  Writing focused tests, that include detailed descriptions, provides the best possible form of documentation for communication between developers. Acceptance tests can be described in a English-like language called [Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin). Implementation for Gherkin is available in most modern programming languages. As a tool, Gherkin, extends the documentation role of automated tests, making them accessible to product managers and other stakeholders.
  Running tests locally is a great tool for engineers, but the entire project benefits when tests are run after each commit to the master repository. Continuous integration servers provide this kind of project level safety net.
  Almost every programming language has freely available, open-source testing frameworks. In addition, there are code coverage tools that calculate how well the tests cover the code."
ingredients:
- Testable code
- A testing framework for your language
- Testing coverage tool (optional)
- Continuous testing integration server (optional)
- Patience and faith in the testing process
directions:
- "If starting a new feature, it is best to start with a failing acceptance test. That insures that the big-picture intent is covered by the new code. Next figure out what code you will have to write to make the acceptance test pass. A good practice is to write unit and functional tests first, before writing the code. This practice is called Test Driven Development, or TDD for short. Writing tests first forces you to think about the interface for your code rather than the implementation. Be careful not to write tests that tie you to a particular implementation. The unit tests should treat each chunk of the code under test as a black box."
- "When starting a new bug, see if you can reproduce the defect in a test before investigating the source of the bug. Having that kind of test will ensure that you know when you have solved the problem. Sometimes the generated test is an acceptance test and when the root cause of the bug is found, the acceptance test can be transformed into a unit test. Don't be afraid to delete and transform test. The goal is to have covered code, not to maximize the number of tests."
- "Acceptance tests tend to take a long time to run, while unit tests should happen in milliseconds. Write many unit tests, some functional tests and few acceptance tests. Test suites that invert these ratios become dauntingly slow, frustrating engineers."
- "When starting testing on a code base that has no tests or doesn't have enough test, be practical. It can be an overwhelming exercise in boiling the ocean to try to get everything under test. Instead focus on putting tests around anything that is changing. As features, bugs and refactorings become necessary, put all the code that you touch under test. Test coverage can be determined with freely available test coverage tools, available in most languages."
- "To ensure that your tests have the maximum impact for your project, work with a continuous integration server. There are hosted services that provide this server for your tests and can be connected to your code repository for automatic runs. One example is [Travis CI](https://travis-ci.org/). Travis CI is also an open source project and can be hosted on your private servers."
snippets: 
tags:
- Unit Testing
- Integration Testing
